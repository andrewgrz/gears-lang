
use ast::*;
use lexer;

grammar;

extern {
    type Location = lexer::Span;
    type Error = lexer::LexicalError;

    enum lexer::Token {
        "(" => lexer::Token::LParen,
        ")" => lexer::Token::RParen,
        "[" => lexer::Token::LBrace,
        "]" => lexer::Token::RBrace,
        "-" => lexer::Token::Minus,
        "+" => lexer::Token::Plus,
        "*" => lexer::Token::Star,
        "/" => lexer::Token::Slash,
        "{" => lexer::Token::LBracket,
        "}" => lexer::Token::RBracket,
        ";" => lexer::Token::SemiColon,
        ":" => lexer::Token::Colon,
        "|" => lexer::Token::Pipe, 
        "," => lexer::Token::Comma,
        "=" => lexer::Token::Eq,
        "==" => lexer::Token::EqEq,
        "!=" => lexer::Token::NotEq,
        "<" => lexer::Token::LessThan,
        "<=" => lexer::Token::LessThanEq,
        ">" => lexer::Token::GreaterThan,
        ">=" => lexer::Token::GreaterThanEq,
        Integer => lexer::Token::Integer(<i64>),
        Name => lexer::Token::Name(<String>),
        "def" => lexer::Token::Def,
        "if" => lexer::Token::If,
        "while" => lexer::Token::While,
        "for" => lexer::Token::For,
        "in" => lexer::Token::In,
        "to" => lexer::Token::To,
        "else" => lexer::Token::Else,
        "let" => lexer::Token::Let,
        "true" => lexer::Token::True,
        "false" => lexer::Token::False,
    }
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

SemiColon<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Pipe<T>: Vec<T> = {
    <v:(<T> "|")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Module = ModStmtAst*;

ModStmtAst: Box<ModStmtAst> = {
    <FunctionDef>,
};

FunctionDef: Box<ModStmtAst> = {
    "def" <name: Name> "(" <args: Args> ")" <exprs: Block> => Box::new(ModStmtAst::FunctionDef{<>})
};

Args = Comma<Arg>;
FnArgs = Comma<Expr>;
Exprs = SemiColon<Expr>;
Stmts = SemiColon<Statement>;
Type = Pipe<Name>;

Arg: ArgAst = {
    <name: Name> ":" <arg_type: Type> => ArgAst::new(<>)
};

Block: Vec<Box<StmtAst>> = {
    "{" <stmts: Stmts> "}" => stmts
};

Assignment: Box<StmtAst> = {
    <new: "let"?> <name: Name> "=" <expr: Expr> => Box::new(StmtAst::new_assignment(<>))
}

// These are the AST's that can be at a block level
Statement: Box<StmtAst> = {
    <Assignment>,
    <Expr> => Box::new(StmtAst::Expr(<>)),
}

FunctionCall: ExprAst = {
    <name: Name> "(" <args: FnArgs> ")" => ExprAst::FunctionCall{<>}
}

IfExpr: ExprAst = {
    "if" <cmp_expr: Expr> <exprs: Block> <else_exprs: ("else" <Block>)?> => ExprAst::new_if(<>)
}

WhileExpr: ExprAst = {
    "while" <cmp_expr: Expr> <exprs: Block> => ExprAst::new_while(<>)
}

ForExpr: ExprAst = {
    "for" <name: Name> "in" <range: RangeExpr> <exprs: Block> => ExprAst::new_for(<>)
}

RangeExpr: RangeAst = {
    <start: Integer> "to" <end: Integer> => RangeAst::new(<>)
}

ListExpr: ExprAst = {
    "[" <exprs: FnArgs> "]" => ExprAst::new_list(<>)
}

CompareOp: BinOpAst = {
    "<" => BinOpAst::LessThan,
    ">" => BinOpAst::GreaterThan,
    "==" => BinOpAst::EqEq,
    "!=" => BinOpAst::NotEq,
    ">=" => BinOpAst::GreaterThanEq,
    "<=" => BinOpAst::LessThanEq,
};

Expr: ExprAst = {
    Expr CompareOp AddExpr => ExprAst::new_op(<>),
    AddExpr,
};

AddExpr: ExprAst = {
    AddExpr ExprOp Factor => ExprAst::new_op(<>),
    Factor,
};

ExprOp: BinOpAst = {
    "+" => BinOpAst::Add,
    "-" => BinOpAst::Sub,
};

Factor: ExprAst = {
    Factor FactorOp Term => ExprAst::new_op(<>),
    Term,
};

FactorOp: BinOpAst = {
    "*" => BinOpAst::Mul,
    "/" => BinOpAst::Div,
};

Term: ExprAst = {
    Name => ExprAst::Variable(<>.to_string()),
    Integer => ExprAst::Integer(<>),
    "false" => ExprAst::Bool(false),
    "true" => ExprAst::Bool(true),
    <ListExpr>,
    <IfExpr>,
    <WhileExpr>,
    <ForExpr>,
    <FunctionCall>,     
    "(" <Expr> ")",
};
